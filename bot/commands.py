import logging
import random
import os
import discord
import aiohttp
from discord.ext import commands
from discord import app_commands
import asyncio

from . import config, database, helpers, state
from datetime import datetime, timedelta, timezone, date

logger = logging.getLogger(__name__)

# -----------------------
# Utils / format helpers
# -----------------------
def format_pokeweed_display(name, power, hp, rarity, owned=0):
    stars = {
        "Commun": "üåø",
        "Peu Commun": "üå±üåø",
        "Rare": "üåü",
        "Tr√®s Rare": "üíé",
        "L√©gendaire": "üåàüëë",
    }
    flair = {
        "Commun": "",
        "Peu Commun": "*",
        "Rare": "**",
        "Tr√®s Rare": "***",
        "L√©gendaire": "__**"
    }
    flair_end = {
        "Commun": "",
        "Peu Commun": "*",
        "Rare": "**",
        "Tr√®s Rare": "***",
        "L√©gendaire": "**__"
    }

    status = "üÜï Nouvelle carte !" if owned == 0 else f"x{owned + 1}"
    return f"{stars.get(rarity, 'üåø')} {flair[rarity]}{name}{flair_end[rarity]} ‚Äî üí• {power} | ‚ù§Ô∏è {hp} | ‚ú® {rarity} ({status})"

def _now_utc():
    return datetime.now(timezone.utc)

def _format_remaining(td: timedelta) -> str:
    # retourne "Xh Ymin"
    total_sec = int(td.total_seconds())
    hours = total_sec // 3600
    minutes = (total_sec % 3600) // 60
    return f"{hours}h {minutes}min"

# Anti double-clic /booster
_inflight_boosters: set[int] = set()


def setup(bot: commands.Bot):
    # ---------------------------------------
    # /hey
    # ---------------------------------------
    @bot.tree.command(name="hey", description="Parle avec Kana√©, l'IA officielle du serveur !")
    @app_commands.describe(message="Ton message √† envoyer")
    async def hey(interaction: discord.Interaction, message: str):
        await interaction.response.defer(ephemeral=True)
        try:
            async with aiohttp.ClientSession() as session:
                headers = {
                    "Authorization": f"Bearer {config.MISTRAL_API_KEY}",
                    "Content-Type": "application/json",
                }
                payload = {
                    "agent_id": config.AGENT_ID_MISTRAL,
                    "messages": [{"role": "user", "content": message}],
                }
                async with session.post(
                    "https://api.mistral.ai/v1/agents/completions",
                    headers=headers,
                    json=payload,
                ) as resp:
                    if resp.status == 200:
                        data = await resp.json()
                        response_text = data['choices'][0]['message']['content']
                    else:
                        response_text = f"Yo, Mistral a r√©pondu {resp.status}. J'sais pas ce qu'il veut l√† fr√©rot."
        except Exception as e:
            logger.error("Mistral API error: %s", e)
            response_text = "Yo, j'crois que Mistral est en PLS l√†, r√©essaye plus tard."
        await interaction.followup.send(response_text, ephemeral=True)

    # ---------------------------------------
    # /score
    # ---------------------------------------
    @bot.tree.command(name="score", description="Affiche ton score ou celui d‚Äôun autre membre")
    @app_commands.describe(membre="Le membre dont tu veux voir le score")
    async def score_cmd(interaction: discord.Interaction, membre: discord.Member = None):
        target = membre if membre else interaction.user
        user_id = str(target.id)

        async with database.db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("SELECT user_id, points FROM scores ORDER BY points DESC;")
                sorted_rows = await cur.fetchall()

        filtered = []
        for uid, pts in sorted_rows:
            member = interaction.guild.get_member(int(uid))
            if member and any(role.id == config.EXCLUDED_ROLE_ID for role in member.roles):
                continue
            filtered.append((uid, pts))

        position = None
        user_score = 0
        for i, (uid, pts) in enumerate(filtered, 1):
            if str(uid) == user_id:
                position = i
                user_score = pts
                break

        if position:
            await interaction.response.send_message(
                f"üìä **{target.display_name}** ‚Üí {user_score} pts (Rang #{position})",
                ephemeral=True
            )
        else:
            await interaction.response.send_message(
                f"üìä **{target.display_name}** n‚Äôa pas encore de points (ou son r√¥le est exclu).",
                ephemeral=True
            )

    # ---------------------------------------
    # /top-5
    # ---------------------------------------
    @bot.tree.command(name="top-5", description="Affiche le top 5 des meilleurs fumeurs")
    async def top_5(interaction: discord.Interaction):
        message = await helpers.build_top5_message(
            bot,
            interaction.guild,
            mention_users=False,
            header="üåø Top 5 Fumeurs Kana√© üåø",
        )
        if not message:
            await interaction.response.send_message(
                "üìä Pas encore de points enregistr√©s (ou tous les membres sont exclus).",
                ephemeral=True,
            )
            return
        await interaction.response.send_message(message, ephemeral=True)

    # ---------------------------------------
    # /set (admin)
    # ---------------------------------------
    @bot.tree.command(name="set", description="D√©finit manuellement le total de points d'un utilisateur")
    @app_commands.describe(user_id="ID Discord de l'utilisateur", nouveau_total="Nombre de points √† d√©finir")
    async def set_points(interaction: discord.Interaction, user_id: str, nouveau_total: int):
        try:
            guild = interaction.guild
            member = guild.get_member(int(user_id))
            if not member:
                await interaction.response.send_message("‚ùå Utilisateur introuvable dans cette guild.", ephemeral=True)
                return
            await database.set_user_points(database.db_pool, user_id, nouveau_total)
            await interaction.response.send_message(f"‚úÖ Le score de {member.display_name} a √©t√© mis √† **{nouveau_total} points**.", ephemeral=True)
        except Exception as e:
            logger.error("/set failed: %s", e)
            await interaction.response.send_message("‚ùå Une erreur est survenue en d√©finissant le score.", ephemeral=True)

    # ---------------------------------------
    # /booster (SAFE)
    # ---------------------------------------
    @bot.tree.command(name="booster", description="Ouvre un booster de 4 Pok√©weeds al√©atoires !")
    async def booster(interaction: discord.Interaction):
        user_id = interaction.user.id
        now = _now_utc()

        # Ack imm√©diat pour √©viter Unknown interaction
        try:
            await interaction.response.defer(ephemeral=True, thinking=True)
        except discord.InteractionResponded:
            pass
        except Exception as e:
            logger.warning("Impossible de defer l'interaction: %s", e)

        # Anti double-clic
        if user_id in _inflight_boosters:
            try:
                await interaction.followup.send("Patience fr√©rot, ton booster est d√©j√† en cours d‚Äôouverture‚Ä¶", ephemeral=True)
            except Exception:
                pass
            return
        _inflight_boosters.add(user_id)

        try:
            # 1) V√©rifier cooldown 12h (sans le poser)
            async with database.db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("SELECT last_opened FROM booster_cooldowns WHERE user_id=%s;", (user_id,))
                    row = await cur.fetchone()
                    if row and row[0]:
                        last_time = row[0] if row[0].tzinfo else row[0].replace(tzinfo=timezone.utc)
                        delta = now - last_time
                        if delta < timedelta(hours=12):
                            remaining = timedelta(hours=12) - delta
                            await interaction.edit_original_response(
                                content=f"üïí Tu dois attendre encore **{_format_remaining(remaining)}** avant d‚Äôouvrir un nouveau booster fr√©rot."
                            )
                            return

            # 2) Pr√©parer le tirage et le texte (aucune √©criture DB ici)
            async with database.db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    # 4 pok√©weeds al√©atoires
                    await cur.execute("SELECT id, name, hp, capture_points, power, rarity FROM pokeweeds ORDER BY RAND() LIMIT 4;")
                    rewards = await cur.fetchall()

                    points_by_rarity = {
                        "Commun": 2,
                        "Peu Commun": 4,
                        "Rare": 8,
                        "Tr√®s Rare": 12,
                        "L√©gendaire": 15,
                    }
                    bonus_new = 5

                    total_points = 0
                    desc_lines = []
                    # On calcule le statut "owned" AVANT insertion, pour afficher correctement
                    pre_owned_counts = []
                    for (pid, name, hp, cap_pts, power, rarity) in rewards:
                        await cur.execute(
                            "SELECT COUNT(*) FROM user_pokeweeds WHERE user_id=%s AND pokeweed_id=%s;",
                            (user_id, pid)
                        )
                        count_row = await cur.fetchone()
                        owned = count_row[0] if count_row else 0
                        pre_owned_counts.append(owned)

                        pts = points_by_rarity.get(rarity, 0)
                        if owned == 0:
                            pts += bonus_new
                        total_points += pts

                        desc_lines.append(
                            format_pokeweed_display(name=name, power=power, hp=hp, rarity=rarity, owned=owned)
                        )

            desc = "\n".join(desc_lines)
            border = "üåÄ" * 12

            # 3) Envoyer √† l'utilisateur AVANT toute √©criture DB
            try:
                await interaction.edit_original_response(
                    content=(
                        "üÉè Ouverture du booster... ‚ú®\n\n"
                        f"{desc}\n\n"
                        f"üéñÔ∏è Tu gagnes **{total_points} points** dans le concours Kana√© !"
                    )
                )
            except discord.NotFound as e:
                # Interaction perdue ‚Üí ne rien consommer
                logger.error("edit_original_response NotFound (Unknown interaction): %s", e)
                try:
                    await interaction.followup.send(
                        content=(
                            "üÉè Ouverture du booster... ‚ú®\n\n"
                            f"{desc}\n\n"
                            f"üéñÔ∏è Tu gagnes **{total_points} points** dans le concours Kana√© !"
                        ),
                        ephemeral=True
                    )
                except Exception as e2:
                    logger.error("followup.send failed too, NOT consuming booster: %s", e2)
                    return  # rien n'est consomm√©
            except Exception as e:
                logger.error("Failed to send booster result, NOT consuming booster: %s", e)
                return  # rien n'est consomm√©

            # 4) Si on est ici, l'utilisateur a re√ßu son booster -> on peut appliquer les effets en DB
            try:
                async with database.db_pool.acquire() as conn:
                    async with conn.cursor() as cur:
                        # Ins√©rer les cartes gagn√©es
                        for (pid, name, hp, cap_pts, power, rarity) in rewards:
                            await cur.execute(
                                "INSERT INTO user_pokeweeds (user_id, pokeweed_id, capture_date) VALUES (%s, %s, NOW());",
                                (user_id, pid)
                            )
                        # Ajouter les points
                        await database.add_points(database.db_pool, user_id, total_points)

                        # Poser/mettre √† jour le cooldown (12h)
                        await cur.execute(
                            "INSERT INTO booster_cooldowns (user_id, last_opened) VALUES (%s, %s) "
                            "ON DUPLICATE KEY UPDATE last_opened = VALUES(last_opened);",
                            (user_id, now)
                        )
            except Exception as e:
                # L'utilisateur a vu le booster, mais l'√©criture a rat√© -> on log + msg info
                logger.error("Failed to persist booster effects: %s", e)
                try:
                    await interaction.followup.send(
                        "‚ö†Ô∏è Ton booster a √©t√© envoy√© mais j‚Äôai eu un souci pour enregistrer en base. "
                        "Si tu vois un comportement bizarre, ping un modo üôè",
                        ephemeral=True
                    )
                except Exception:
                    pass
                return  # on n'annonce pas publiquement si la DB a √©chou√©

            # 5) Annonce publique (best effort)
            try:
                channel = interaction.guild.get_channel(config.CHANNEL_POKEWEED_ID)
                if channel:
                    await channel.send(
                        f"{border}\n\n"
                        f"üì¶ **{interaction.user.display_name}** a ouvert un booster :\n\n"
                        f"{desc}\n\n"
                        f"üéñÔ∏è +{total_points} points pour le concours !\n\n"
                        f"{border}"
                    )
            except Exception as e:
                logger.warning("Public booster announce failed: %s", e)

        finally:
            _inflight_boosters.discard(user_id)

    # ---------------------------------------
    # /capture
    # ---------------------------------------
    @bot.tree.command(name="capture", description="Tente de capturer le Pok√©weed sauvage")
    async def capture(interaction: discord.Interaction):
        if not state.current_spawn:
            await interaction.response.send_message("Aucun Pok√©weed √† capturer maintenant...", ephemeral=True)
            return

        winner_id = getattr(state, "capture_winner", None)
        if winner_id:
            await interaction.response.send_message("Trop tard, il a d√©j√† √©t√© captur√© !", ephemeral=True)
            return

        pokeweed = state.current_spawn
        user_id = interaction.user.id

        async with database.db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute(
                    "INSERT INTO user_pokeweeds (user_id, pokeweed_id, capture_date) VALUES (%s, %s, NOW());",
                    (user_id, pokeweed[0])
                )
                points = pokeweed[3]
                await database.add_points(database.db_pool, user_id, points)

        state.capture_winner = user_id
        channel = interaction.channel
        await channel.send(f"üéâ Bravo {interaction.user.mention} pour avoir captur√© **{pokeweed[1]}** ! +{pokeweed[3]} points üåø")
        await interaction.response.send_message("Tu l‚Äôas captur√© !", ephemeral=True)

    # ---------------------------------------
    # /pokedex
    # ---------------------------------------
    @bot.tree.command(name="pokedex", description="Affiche ton Pok√©dex personnel ou celui d‚Äôun autre")
    @app_commands.describe(membre="@ Le membre dont tu veux voir le Pok√©dex")
    async def pokedex(interaction: discord.Interaction, membre: discord.Member = None):
        target = membre if membre else interaction.user

        async with database.db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                await cur.execute("""
                    SELECT 
                        p.name, p.hp, p.capture_points, p.power, p.rarity,
                        COUNT(*) as total,
                        MAX(up.capture_date) as last_capture
                    FROM user_pokeweeds up 
                    JOIN pokeweeds p ON up.pokeweed_id = p.id 
                    WHERE up.user_id=%s 
                    GROUP BY p.id;
                """, (target.id,))
                rows = await cur.fetchall()

                await cur.execute("SELECT COUNT(*) FROM pokeweeds;")
                total_available = (await cur.fetchone())[0]

        if not rows:
            await interaction.response.send_message(
                f"üìò {target.display_name} n‚Äôa captur√© aucun Pok√©weed...", ephemeral=True
            )
            return

        # Format d‚Äôaffichage styl√©
        def format_entry(name, hp, points, power, rarity, total, last_date):
            stars = {
                "Commun": "üåø",
                "Peu Commun": "üå±üåø",
                "Rare": "üåü",
                "Tr√®s Rare": "üíé",
                "L√©gendaire": "üåàüëë",
            }
            flair = {
                "Commun": "",
                "Peu Commun": "*",
                "Rare": "**",
                "Tr√®s Rare": "***",
                "L√©gendaire": "__**"
            }
            flair_end = {
                "Commun": "",
                "Peu Commun": "*",
                "Rare": "**",
                "Tr√®s Rare": "***",
                "L√©gendaire": "**__"
            }
            last_seen = last_date.strftime("%d %b %Y") if last_date else "?"
            return (
                f"{stars.get(rarity, 'üåø')} {flair[rarity]}{name}{flair_end[rarity]}\n"
                f"‚Ä¢ Raret√© : {rarity}\n"
                f"‚Ä¢ üí• Attaque : {power}\n"
                f"‚Ä¢ ‚ù§Ô∏è Vie : {hp}\n"
                f"‚Ä¢ ‚ú® Points de capture : +{points}\n"
                f"‚Ä¢ üì¶ Poss√©d√© : x{total}\n"
                f"‚Ä¢ üìÖ Derni√®re capture : {last_seen}\n"
            )

        entries = "\n".join([
            format_entry(name, hp, points, power, rarity, total, last_date)
            for name, hp, points, power, rarity, total, last_date in rows
        ])

        unique_count = len(rows)
        total_count = sum([total for *_, total, _ in rows])
        missing = total_available - unique_count

        summary = (
            f"\nüìä **Statistiques de collection**\n"
            f"‚úÖ Cartes diff√©rentes : {unique_count}/{total_available}\n"
            f"üì¶ Total de cartes collect√©es : {total_count}\n"
            f"‚ùó Il te manque encore **{missing}** Pok√©weed{'s' if missing > 1 else ''} pour compl√©ter le Pok√©dex !"
        )

        full_message = f"üìò Pok√©dex de {target.display_name} :\n\n{entries}{summary}"
        MAX_LENGTH = 2000

        if len(full_message) <= MAX_LENGTH:
            await interaction.response.send_message(full_message, ephemeral=True)
        else:
            # Envoie la premi√®re partie d'annonce
            await interaction.response.send_message(
                "‚ö†Ô∏è Ton Pok√©dex est trop grand pour un seul message‚ÄØ! Je t'envoie en plusieurs parties :", ephemeral=True
            )

            # D√©coupe intelligent par lignes
            lines = full_message.split("\n")
            chunk = ""
            for line in lines:
                if len(chunk) + len(line) + 1 > MAX_LENGTH:
                    await interaction.followup.send(chunk, ephemeral=True)
                    await asyncio.sleep(0.3)  # ‚úÖ Petit d√©lai pour √©viter spam error
                    chunk = ""
                chunk += line + "\n"

            if chunk.strip():
                await interaction.followup.send(chunk, ephemeral=True)

    # ---------------------------------------
    # /init-pokeweeds (admin)
    # ---------------------------------------
    @bot.tree.command(name="init-pokeweeds", description="Ins√®re les 31 Pok√©weed de base")
    async def init_pokeweeds(interaction: discord.Interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå Admin uniquement.", ephemeral=True)
            return

        strains = [
            ("Gelachu", 100, 10, 40, "Rare", 0.05),
            ("Bulba Kush", 90, 7, 30, "Commun", 0.20),
            ("Sourmander", 110, 9, 35, "Peu Commun", 0.15),
            ("Gluezor", 120, 12, 45, "Rare", 0.05),
            ("OGtortank", 105, 8, 32, "Peu Commun", 0.10),
            ("Widowlee", 95, 6, 28, "Commun", 0.25),
            ("Purplax", 80, 5, 22, "Commun", 0.30),
            ("Skyweedon", 115, 10, 38, "Rare", 0.07),
            ("Pineachu", 85, 7, 25, "Peu Commun", 0.12),
            ("AK-Dracau", 100, 8, 33, "Peu Commun", 0.12),
            ("Zkittlechu", 90, 6, 27, "Commun", 0.20),
            ("Jackasaur", 100, 8, 30, "Peu Commun", 0.10),
            ("Durbanape", 110, 9, 36, "Rare", 0.07),
            ("Lemonix", 95, 6, 26, "Commun", 0.22),
            ("Amnesir", 105, 9, 31, "Peu Commun", 0.10),
            ("Noctulight", 100, 7, 29, "Commun", 0.20),
            ("Weddinja", 110, 11, 37, "Rare", 0.05),
            ("Trainquaza", 100, 9, 34, "Peu Commun", 0.08),
            ("Piekachu", 90, 7, 28, "Commun", 0.22),
            ("Critidos", 105, 8, 32, "Peu Commun", 0.09),
            ("Crackchomp", 95, 6, 27, "Commun", 0.25),
            ("Dosidoof", 100, 8, 31, "Peu Commun", 0.10),
            ("Mimosaur", 90, 6, 26, "Commun", 0.22),
            ("Tangrowth OG", 85, 5, 24, "Commun", 0.30),
            ("Forbiddenite", 115, 12, 40, "Rare", 0.04),
            ("Slurrizard", 100, 8, 33, "Peu Commun", 0.12),
            ("Runflare", 110, 10, 36, "Rare", 0.06),
            ("Gmok√©mon", 120, 13, 42, "Tr√®s Rare", 0.03),
            ("Maclax", 110, 9, 35, "Rare", 0.05),
            ("Sherbizard", 95, 7, 29, "Commun", 0.22),
            ("Kan√©clor", 150, 20, 60, "L√©gendaire", 0.01)
        ]

        async with database.db_pool.acquire() as conn:
            async with conn.cursor() as cur:
                for s in strains:
                    await cur.execute("INSERT INTO pokeweeds (name, hp, capture_points, power, rarity, drop_rate) VALUES (%s,%s,%s,%s,%s,%s);", s)

        await interaction.response.send_message("üåø 31 Pok√©weed ins√©r√©s !", ephemeral=True)

    # ---------------------------------------
    # /reset-scores (admin)
    # ---------------------------------------
    @bot.tree.command(name="reset-scores", description="R√©initialise tous les scores du concours √† 0 (ADMIN uniquement)")
    async def reset_scores(interaction: discord.Interaction):
        if not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message("‚ùå Tu dois √™tre administrateur pour faire √ßa fr√©rot.", ephemeral=True)
            return

        try:
            async with database.db_pool.acquire() as conn:
                async with conn.cursor() as cur:
                    await cur.execute("UPDATE scores SET points = 0;")
            await interaction.response.send_message("‚úÖ Tous les scores ont √©t√© r√©initialis√©s √† **0** pour le concours.", ephemeral=False)
            logger.info("Tous les scores du concours ont √©t√© remis √† z√©ro.")
        except Exception as e:
            logger.error("/reset-scores failed: %s", e)
            await interaction.response.send_message("‚ùå Erreur lors de la remise √† z√©ro des scores.", ephemeral=True)
